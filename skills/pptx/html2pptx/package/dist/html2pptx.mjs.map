{"version":3,"file":"html2pptx.mjs","sources":["../src/constants.ts","../src/validation.ts","../src/extraction.ts","../src/slide-builder.ts","../src/getChromiumPath.ts","../src/index.ts"],"sourcesContent":["/**\n * Shared constants used throughout html2pptx\n */\n\nexport const PT_PER_PX = 0.75;\nexport const PX_PER_IN = 96;\nexport const EMU_PER_IN = 914400;\n","/**\n * Validation functions for html2pptx\n */\n\nimport type { Page } from 'playwright';\nimport type { PptxGenJS, BodyDimensions, SlideData } from './types.js';\nimport { PT_PER_PX, PX_PER_IN, EMU_PER_IN } from './constants.js';\n\n/**\n * Get body dimensions and check for overflow\n */\nexport async function getBodyDimensions(page: Page): Promise<BodyDimensions> {\n  const bodyDimensions = await page.evaluate(() => {\n    const body = document.body;\n    const style = window.getComputedStyle(body);\n\n    return {\n      width: parseFloat(style.width),\n      height: parseFloat(style.height),\n      scrollWidth: body.scrollWidth,\n      scrollHeight: body.scrollHeight,\n    };\n  });\n\n  const errors = [];\n  const widthOverflowPx = Math.max(0, bodyDimensions.scrollWidth - bodyDimensions.width - 1);\n  const heightOverflowPx = Math.max(0, bodyDimensions.scrollHeight - bodyDimensions.height - 1);\n\n  const widthOverflowPt = widthOverflowPx * PT_PER_PX;\n  const heightOverflowPt = heightOverflowPx * PT_PER_PX;\n\n  if (widthOverflowPt > 0 || heightOverflowPt > 0) {\n    const directions = [];\n    if (widthOverflowPt > 0) directions.push(`${widthOverflowPt.toFixed(1)}pt horizontally`);\n    if (heightOverflowPt > 0) directions.push(`${heightOverflowPt.toFixed(1)}pt vertically`);\n    const reminder =\n      heightOverflowPt > 0 ? ' (Remember: leave 0.5\" margin at bottom of slide)' : '';\n    errors.push(`HTML content overflows body by ${directions.join(' and ')}${reminder}`);\n  }\n\n  return { ...bodyDimensions, errors };\n}\n\n/**\n * Validate dimensions match presentation layout\n */\nexport function validateDimensions(bodyDimensions: BodyDimensions, pres: PptxGenJS): string[] {\n  const errors = [];\n  const widthInches = bodyDimensions.width / PX_PER_IN;\n  const heightInches = bodyDimensions.height / PX_PER_IN;\n\n  if (pres.presLayout) {\n    const layoutWidth = pres.presLayout.width / EMU_PER_IN;\n    const layoutHeight = pres.presLayout.height / EMU_PER_IN;\n\n    if (Math.abs(layoutWidth - widthInches) > 0.1 || Math.abs(layoutHeight - heightInches) > 0.1) {\n      errors.push(\n        `HTML dimensions (${widthInches.toFixed(1)}\" × ${heightInches.toFixed(1)}\") ` +\n          `don't match presentation layout (${layoutWidth.toFixed(1)}\" × ${layoutHeight.toFixed(1)}\")`\n      );\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate text box positions are not too close to bottom edge\n */\nexport function validateTextBoxPosition(\n  slideData: SlideData,\n  bodyDimensions: BodyDimensions\n): string[] {\n  const errors = [];\n  const slideHeightInches = bodyDimensions.height / PX_PER_IN;\n  const minBottomMargin = 0.5; // 0.5 inches from bottom\n\n  for (const el of slideData.elements) {\n    // Check text elements (p, h1-h6, list)\n    if (['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'list'].includes(el.type)) {\n      // Type guard: el is now TextElement | ListElement (both have position)\n      if (el.type === 'line' || el.type === 'image' || el.type === 'shape') continue;\n\n      const fontSize = el.style?.fontSize || 0;\n      const bottomEdge = el.position.y + el.position.h;\n      const distanceFromBottom = slideHeightInches - bottomEdge;\n\n      if (fontSize > 12 && distanceFromBottom < minBottomMargin) {\n        const getText = () => {\n          if (el.type === 'list') return el.items.find((item) => item.text)?.text || '';\n          if (typeof el.text === 'string') return el.text;\n          if (Array.isArray(el.text)) return el.text.find((t) => t.text)?.text || '';\n          return '';\n        };\n        const textPrefix = getText().substring(0, 50) + (getText().length > 50 ? '...' : '');\n\n        errors.push(\n          `Text box \"${textPrefix}\" ends too close to bottom edge ` +\n            `(${distanceFromBottom.toFixed(2)}\" from bottom, minimum ${minBottomMargin}\" required)`\n        );\n      }\n    }\n  }\n\n  return errors;\n}\n","/**\n * Browser-side extraction functions for html2pptx\n *\n * Note: extractSlideData runs in the browser context via page.evaluate()\n * Helper functions are now in src/playwright/ and bundled via rollup\n */\n\nimport type { Page } from 'playwright';\nimport { dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { packageDirectory } from 'pkg-dir';\nimport type { SlideData } from './types.js';\nimport type { ExtractSlideDataType } from './playwright/types.js';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\n/**\n * Extract slide data from HTML page\n * This function runs in the browser context using helpers from the bundled ExtractSlideData\n */\nexport async function extractSlideData(page: Page): Promise<SlideData> {\n  const pkgDir = await packageDirectory({ cwd: __dirname });\n  if (!pkgDir) {\n    throw new Error('[@ant/html2pptx] Internal error, cannot find extraction script');\n  }\n\n  const scriptPath = join(pkgDir, './dist/playwright/index.iife.js');\n  await page.addScriptTag({ path: scriptPath });\n\n  return await page.evaluate(() => {\n    const { ExtractSlideData } = window as typeof window & {\n      ExtractSlideData: ExtractSlideDataType;\n    };\n    return ExtractSlideData.extractSlideDataInBrowser();\n  });\n}\n","/**\n * Slide building functions for html2pptx\n * These functions add elements to PowerPoint slides\n */\n\nimport type PptxGenJS from 'pptxgenjs';\nimport type { Slide, SlideData, TextOptions } from './types.js';\n\n/**\n * Add background to slide (image or color)\n */\nexport async function addBackground(\n  slideData: SlideData,\n  targetSlide: Slide,\n  _tmpDir: string\n): Promise<void> {\n  if (slideData.background.type === 'image' && slideData.background.path) {\n    let imagePath = slideData.background.path.startsWith('file://')\n      ? slideData.background.path.replace('file://', '')\n      : slideData.background.path;\n    targetSlide.background = { path: imagePath };\n  } else if (slideData.background.type === 'color' && slideData.background.value) {\n    targetSlide.background = { color: slideData.background.value };\n  }\n}\n\n/**\n * Add all elements to slide (images, shapes, text, lists)\n */\nexport function addElements(slideData: SlideData, targetSlide: Slide, pres: PptxGenJS): void {\n  for (const el of slideData.elements) {\n    if (el.type === 'image') {\n      let imagePath = el.src.startsWith('file://') ? el.src.replace('file://', '') : el.src;\n      targetSlide.addImage({\n        path: imagePath,\n        x: el.position.x,\n        y: el.position.y,\n        w: el.position.w,\n        h: el.position.h,\n      });\n    } else if (el.type === 'line') {\n      targetSlide.addShape(pres.ShapeType.line, {\n        x: el.x1,\n        y: el.y1,\n        w: el.x2 - el.x1,\n        h: el.y2 - el.y1,\n        line: { color: el.color, width: el.width },\n      });\n    } else if (el.type === 'shape') {\n      const shapeOptions: TextOptions = {\n        x: el.position.x,\n        y: el.position.y,\n        w: el.position.w,\n        h: el.position.h,\n      };\n\n      if (el.shape.fill) {\n        shapeOptions.fill = { color: el.shape.fill };\n        if (el.shape.transparency != null) shapeOptions.fill.transparency = el.shape.transparency;\n      }\n      if (el.shape.line) shapeOptions.line = el.shape.line;\n      if (el.shape.rectRadius > 0) shapeOptions.rectRadius = el.shape.rectRadius;\n      if (el.shape.shadow) shapeOptions.shadow = el.shape.shadow;\n\n      targetSlide.addText(el.text || '', shapeOptions);\n    } else if (el.type === 'list') {\n      const listOptions: TextOptions = {\n        x: el.position.x,\n        y: el.position.y,\n        w: el.position.w,\n        h: el.position.h,\n        fontSize: el.style.fontSize,\n        fontFace: el.style.fontFace,\n        color: el.style.color,\n        align: el.style.align as PptxGenJS.HAlign | undefined,\n        valign: 'top',\n        paraSpaceBefore: el.style.paraSpaceBefore,\n        paraSpaceAfter: el.style.paraSpaceAfter,\n      };\n      if (el.style.lineSpacing !== null && el.style.lineSpacing !== undefined) {\n        listOptions.lineSpacing = el.style.lineSpacing;\n      }\n      if (el.style.margin) listOptions.margin = el.style.margin;\n      targetSlide.addText(el.items, listOptions);\n    } else {\n      // Check if text is single-line (height suggests one line)\n      const lineHeight = el.style.lineSpacing || el.style.fontSize * 1.2;\n      const isSingleLine = el.position.h <= lineHeight * 1.5;\n\n      let adjustedX = el.position.x;\n      let adjustedW = el.position.w;\n\n      // Make single-line text 2% wider to account for underestimate\n      if (isSingleLine) {\n        const widthIncrease = el.position.w * 0.02;\n        const align = el.style.align;\n\n        if (align === 'center') {\n          // Center: expand both sides\n          adjustedX = el.position.x - widthIncrease / 2;\n          adjustedW = el.position.w + widthIncrease;\n        } else if (align === 'right') {\n          // Right: expand to the left\n          adjustedX = el.position.x - widthIncrease;\n          adjustedW = el.position.w + widthIncrease;\n        } else {\n          // Left (default): expand to the right\n          adjustedW = el.position.w + widthIncrease;\n        }\n      }\n\n      const textOptions: TextOptions = {\n        x: adjustedX,\n        y: el.position.y,\n        w: adjustedW,\n        h: el.position.h,\n        fontSize: el.style.fontSize,\n        fontFace: el.style.fontFace,\n        color: el.style.color,\n        bold: el.style.bold,\n        italic: el.style.italic,\n        valign: 'top',\n        paraSpaceBefore: el.style.paraSpaceBefore,\n        paraSpaceAfter: el.style.paraSpaceAfter,\n        inset: 0, // Remove default PowerPoint internal padding\n      };\n\n      if (el.style.underline) {\n        textOptions.underline = {\n          style: 'sng',\n          color: el.style.color,\n        };\n      }\n\n      if (el.style.lineSpacing !== null && el.style.lineSpacing !== undefined) {\n        textOptions.lineSpacing = el.style.lineSpacing;\n      }\n      if (el.style.align) textOptions.align = el.style.align as PptxGenJS.HAlign | undefined;\n      if (el.style.margin) textOptions.margin = el.style.margin;\n      if (el.style.rotate !== null && el.style.rotate !== undefined) {\n        textOptions.rotate = el.style.rotate;\n      }\n      if (el.style.transparency !== null && el.style.transparency !== undefined) {\n        textOptions.transparency = el.style.transparency;\n      }\n\n      targetSlide.addText(el.text, textOptions);\n    }\n  }\n}\n","import { chromium } from 'playwright';\nimport { access, readdir } from 'fs/promises';\nimport { join } from 'path';\n\n/**\n * Helper function to check if a file exists\n */\nasync function fileExists(path: string): Promise<boolean> {\n  try {\n    await access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Determines the best path to a globally installed Chromium binary\n */\nexport async function getChromiumPath(): Promise<string> {\n  const executablePath = chromium.executablePath();\n\n  // Check if this executable exists\n  if (await fileExists(executablePath)) {\n    return executablePath;\n  }\n\n  // Parse the path to find the chromium-XXXX segment\n  const pathParts = executablePath.split('/');\n  const chromiumDirIndex = pathParts.findIndex((part) => part.startsWith('chromium-'));\n\n  if (chromiumDirIndex === -1) {\n    throw new Error(`Could not find chromium revision in path: ${executablePath}`);\n  }\n\n  const chromiumDirName = pathParts[chromiumDirIndex];\n  const expectedRevision = parseInt(chromiumDirName.replace('chromium-', ''), 10);\n\n  // Get the parent directory containing chromium-XXXX directories\n  const parentDir = pathParts.slice(0, chromiumDirIndex).join('/');\n\n  // Get the relative path after the chromium-XXXX directory\n  const relativePath = pathParts.slice(chromiumDirIndex + 1).join('/');\n\n  // Find all chromium-XXXX directories\n  let availableDirs: string[] = [];\n  try {\n    const entries = await readdir(parentDir);\n    availableDirs = entries.filter((dir) => dir.startsWith('chromium-'));\n  } catch (_error) {\n    throw new Error(`Could not read directory: ${parentDir}`);\n  }\n\n  if (availableDirs.length === 0) {\n    throw new Error(`No chromium installations found in: ${parentDir}`);\n  }\n\n  // Find the closest revision\n  let closestDiff = Infinity;\n  let closestPath = undefined;\n\n  for (const dir of availableDirs) {\n    const revision = parseInt(dir.replace('chromium-', ''), 10);\n    const diff = Math.abs(revision - expectedRevision);\n\n    if (diff < closestDiff) {\n      const candidatePath = join(parentDir, dir, relativePath);\n      if (await fileExists(candidatePath)) {\n        closestDiff = diff;\n        closestPath = candidatePath;\n      }\n    }\n  }\n\n  if (!closestPath) {\n    throw new Error(\n      `No valid chromium executable found. Tried ${availableDirs.length} alternatives.`\n    );\n  }\n\n  return closestPath;\n}\n","/**\n * html2pptx - Convert HTML slide to pptxgenjs slide with positioned elements\n *\n * USAGE:\n *   const pptx = new pptxgen();\n *   pptx.layout = 'LAYOUT_16x9';  // Must match HTML body dimensions\n *\n *   const { slide, placeholders } = await html2pptx('slide.html', pptx);\n *   slide.addChart(pptx.charts.LINE, data, placeholders[0]);\n *\n *   await pptx.writeFile('output.pptx');\n *\n * FEATURES:\n *   - Converts HTML to PowerPoint with accurate positioning\n *   - Supports text, images, shapes, and bullet lists\n *   - Extracts placeholder elements (class=\"placeholder\") with positions\n *   - Handles CSS gradients, borders, and margins\n *\n * VALIDATION:\n *   - Uses body width/height from HTML for viewport sizing\n *   - Throws error if HTML dimensions don't match presentation layout\n *   - Throws error if content overflows body (with overflow details)\n *\n * RETURNS:\n *   { slide, placeholders } where placeholders is an array of { id, x, y, w, h }\n *\n * @packageDocumentation\n */\n\nimport { chromium, type LaunchOptions } from 'playwright';\nimport path from 'path';\nimport type { PptxGenJS, Html2PptxOptions, Html2PptxResult } from './types.js';\nimport { getBodyDimensions, validateDimensions, validateTextBoxPosition } from './validation.js';\nimport { extractSlideData } from './extraction.js';\nimport { addBackground, addElements } from './slide-builder.js';\nimport { getChromiumPath } from './getChromiumPath.js';\n\n// Re-export types for consumers\nexport type {\n  PptxGenJS,\n  Slide,\n  Html2PptxOptions,\n  Html2PptxResult,\n  Placeholder,\n  ImageOptions,\n  TextOptions,\n  TextRun,\n  Shadow,\n} from './types.js';\n\nexport const Y = 5;\n\nexport async function html2pptx(\n  htmlFile: string,\n  pres: PptxGenJS,\n  options: Html2PptxOptions = {}\n): Promise<Html2PptxResult> {\n  const { tmpDir = process.env.TMPDIR || '/tmp', slide = null } = options;\n\n  try {\n    // Use Chrome on macOS, default Chromium on Unix\n    const launchOptions: LaunchOptions = {\n      env: { TMPDIR: tmpDir },\n      executablePath: await getChromiumPath(),\n    };\n    if (process.platform === 'darwin') {\n      launchOptions.channel = 'chrome';\n    }\n\n    const browser = await chromium.launch(launchOptions);\n\n    let bodyDimensions;\n    let slideData;\n\n    const filePath = path.isAbsolute(htmlFile) ? htmlFile : path.join(process.cwd(), htmlFile);\n    const validationErrors = [];\n\n    try {\n      const page = await browser.newPage();\n      page.on('console', (msg) => {\n        // Log the message text to your test runner's console\n        console.log(`Browser console: ${msg.text()}`);\n      });\n\n      await page.goto(`file://${filePath}`);\n\n      bodyDimensions = await getBodyDimensions(page);\n\n      await page.setViewportSize({\n        width: Math.round(bodyDimensions.width),\n        height: Math.round(bodyDimensions.height),\n      });\n\n      slideData = await extractSlideData(page);\n    } finally {\n      await browser.close();\n    }\n\n    // Collect all validation errors\n    if (bodyDimensions.errors && bodyDimensions.errors.length > 0) {\n      validationErrors.push(...bodyDimensions.errors);\n    }\n\n    const dimensionErrors = validateDimensions(bodyDimensions, pres);\n    if (dimensionErrors.length > 0) {\n      validationErrors.push(...dimensionErrors);\n    }\n\n    const textBoxPositionErrors = validateTextBoxPosition(slideData, bodyDimensions);\n    if (textBoxPositionErrors.length > 0) {\n      validationErrors.push(...textBoxPositionErrors);\n    }\n\n    if (slideData.errors && slideData.errors.length > 0) {\n      validationErrors.push(...slideData.errors);\n    }\n\n    // Throw all errors at once if any exist\n    if (validationErrors.length > 0) {\n      const errorMessage =\n        validationErrors.length === 1\n          ? validationErrors[0]\n          : `Multiple validation errors found:\\n${validationErrors.map((e, i) => `  ${i + 1}. ${e}`).join('\\n')}`;\n      throw new Error(errorMessage);\n    }\n\n    const targetSlide = slide || pres.addSlide();\n\n    await addBackground(slideData, targetSlide, tmpDir);\n    addElements(slideData, targetSlide, pres);\n\n    return { slide: targetSlide, placeholders: slideData.placeholders };\n  } catch (error) {\n    if (error instanceof Error && !error.message.startsWith(htmlFile)) {\n      throw new Error(`${htmlFile}: ${error.message}`);\n    }\n    throw error;\n  }\n}\n"],"names":["PT_PER_PX","PX_PER_IN","EMU_PER_IN","getBodyDimensions","page","bodyDimensions","body","style","errors","widthOverflowPx","heightOverflowPx","widthOverflowPt","heightOverflowPt","directions","reminder","validateDimensions","pres","widthInches","heightInches","layoutWidth","layoutHeight","validateTextBoxPosition","slideData","slideHeightInches","minBottomMargin","el","fontSize","bottomEdge","distanceFromBottom","getText","item","t","textPrefix","__dirname","dirname","fileURLToPath","extractSlideData","pkgDir","packageDirectory","scriptPath","join","ExtractSlideData","addBackground","targetSlide","_tmpDir","imagePath","addElements","shapeOptions","listOptions","lineHeight","isSingleLine","adjustedX","adjustedW","widthIncrease","align","textOptions","fileExists","path","access","getChromiumPath","executablePath","chromium","pathParts","chromiumDirIndex","part","chromiumDirName","expectedRevision","parentDir","relativePath","availableDirs","readdir","dir","closestDiff","closestPath","revision","diff","candidatePath","Y","html2pptx","htmlFile","options","tmpDir","slide","launchOptions","browser","filePath","validationErrors","msg","dimensionErrors","textBoxPositionErrors","errorMessage","e","i","error"],"mappings":"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"}